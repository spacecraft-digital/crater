// Generated by CoffeeScript 1.11.1
(function() {
  var NaturalLanguageObjectReference, Promise, SubTargetMatch;

  Promise = require('bluebird');

  SubTargetMatch = require('./SubTargetMatch');

  NaturalLanguageObjectReference = (function() {
    NaturalLanguageObjectReference.prototype.RESULT_FOUND = 'found';

    NaturalLanguageObjectReference.prototype.RESULT_SUGGESTION = 'suggestion';

    NaturalLanguageObjectReference.prototype.RESULT_UNKNOWN = 'unknown';

    NaturalLanguageObjectReference.prototype.RESULT_PRESUMED = 'presumed';

    function NaturalLanguageObjectReference(Customer, query1) {
      this.Customer = Customer;
      this.query = query1;
    }

    NaturalLanguageObjectReference.prototype.findTarget = function() {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return _this.extractCustomerName(_this.query).then(function(match) {
            var c, child, e, formattedSuggestions, i, j, keywords, len, len1, m, matches, potentiallyIntendedTarget, potentiallyIntendedTargets, property, query, ref, suggestions, target;
            matches = [match];
            try {
              while (match.query) {
                query = match.query;
                match = match.target.findSubtarget(match.query);
                if (!match) {
                  break;
                }
                if (match.target === matches[matches.length - 1].target) {
                  break;
                }
                matches.push(match);
                if (!((ref = match.target) != null ? ref.findSubtarget : void 0)) {
                  break;
                }
              }
              if (match && !match.query) {
                return resolve({
                  matches: matches,
                  outcome: _this.RESULT_FOUND,
                  target: match.target
                });
              }
              match = matches[matches.length - 1];
              potentiallyIntendedTargets = [];
              if (match.target && typeof match.target === 'object') {
                for (property in match.target.toObject({
                  virtuals: false,
                  versionKey: false
                })) {
                  if (property[0] === '_') {
                    continue;
                  }
                  child = match.target[property];
                  if (child && typeof child === 'object') {
                    if (child.length) {
                      for (i = 0, len = child.length; i < len; i++) {
                        c = child[i];
                        if (c.findSubtarget && (target = c.findSubtarget(match.query))) {
                          potentiallyIntendedTargets.push(new SubTargetMatch({
                            property: property,
                            label: c.getName(),
                            target: target
                          }));
                        }
                      }
                    } else {
                      if (child.findSubtarget && (target = child.findSubtarget(match.query))) {
                        potentiallyIntendedTargets.push(new SubTargetMatch({
                          property: property,
                          label: property,
                          target: target
                        }));
                      }
                    }
                  }
                }
              }
              if (potentiallyIntendedTargets.length) {
                keywords = ((function() {
                  var j, len1, results;
                  results = [];
                  for (j = 0, len1 = matches.length; j < len1; j++) {
                    m = matches[j];
                    if (m) {
                      results.push(m.keyword.trim());
                    }
                  }
                  return results;
                })()).join(' ');
                suggestions = [];
                formattedSuggestions = [];
                for (j = 0, len1 = potentiallyIntendedTargets.length; j < len1; j++) {
                  potentiallyIntendedTarget = potentiallyIntendedTargets[j];
                  suggestions.push((keywords.trim()) + " " + potentiallyIntendedTarget.label + " " + match.query);
                  formattedSuggestions.push((keywords.trim()) + " _" + potentiallyIntendedTarget.label + "_ " + match.query);
                }
                return resolve({
                  matches: matches,
                  outcome: _this.RESULT_SUGGESTION,
                  suggestions: suggestions,
                  formattedSuggestions: formattedSuggestions
                });
              } else {
                return resolve({
                  outcome: _this.RESULT_UNKNOWN,
                  matches: matches
                });
              }
            } catch (error1) {
              e = error1;
              console.log(e.stack);
              return reject(e);
            }
          })["catch"](reject);
        };
      })(this));
    };

    NaturalLanguageObjectReference.prototype.extractCustomerName = function(query) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return _this.Customer.getAllNameRegexString().then(function(customerRegexString) {
            var e, i, len, m, regex, regexs;
            regexs = [new RegExp("^" + customerRegexString + "\\b\\s*", 'i'), new RegExp("\\bfor\\s+(" + customerRegexString + ")\\b\\s*", 'i')];
            try {
              for (i = 0, len = regexs.length; i < len; i++) {
                regex = regexs[i];
                m = query.match(regex);
                if (m) {
                  query = query.replace(regex, '');
                  return _this.Customer.findOneByName(m[1]).then(function(customer) {
                    if (!customer) {
                      return reject("Sorry, I couldn't figure out which customer `" + m[1] + "` is");
                    }
                    return resolve(new SubTargetMatch({
                      query: query,
                      keyword: m[1].trim(),
                      target: customer,
                      property: 'customer'
                    }));
                  })["catch"](function(error) {
                    console.log(error.stack);
                    return reject("Sorry, I couldn't load data about " + m[1]);
                  });
                }
              }
              return reject("Sorry, I can't see a customer in `" + query + "`");
            } catch (error1) {
              e = error1;
              return reject(e);
            }
          })["catch"](function() {
            return reject("Unable to load customers data");
          });
        };
      })(this));
    };

    return NaturalLanguageObjectReference;

  })();

  module.exports = NaturalLanguageObjectReference;

}).call(this);
