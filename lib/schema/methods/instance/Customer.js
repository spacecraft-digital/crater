// Generated by CoffeeScript 1.11.1
(function() {
  var BaseMethods, SubTargetMatch, projectSchema, regexEscape,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  projectSchema = require('../../Project');

  regexEscape = require('escape-string-regexp');

  SubTargetMatch = require('../../../SubTargetMatch');

  BaseMethods = require('./Base');

  module.exports = {
    getProject: function(name) {
      var i, len, p, ref, regex;
      if (name == null) {
        name = null;
      }
      if (name === null) {
        return this.getDefault('projects');
      } else {
        regex = new RegExp("^" + (regexEscape(name)) + "$", "i");
        ref = this.projects;
        for (i = 0, len = ref.length; i < len; i++) {
          p = ref[i];
          if (p.name.match(regex)) {
            return p;
          }
        }
      }
    },
    getRepo: function(id) {
      var i, j, len, len1, project, ref, ref1, repo;
      ref = this.projects;
      for (i = 0, len = ref.length; i < len; i++) {
        project = ref[i];
        ref1 = project.repos;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          repo = ref1[j];
          if (repo.id === id) {
            return repo;
          }
        }
      }
    },
    addAlias: function(alias) {
      if (indexOf.call(this.aliases, alias) < 0) {
        return this.aliases.push(alias);
      }
    },
    getDefault: function(property) {
      var i, len, p, project, ref;
      switch (property) {
        case 'projects':
          ref = this.projects;
          for (i = 0, len = ref.length; i < len; i++) {
            p = ref[i];
            if (p.defaultProject) {
              project = p;
            }
          }
          return project || this.projects[0];
        default:
          return this.getDefault(property);
      }
    },
    findSubtarget: function(query) {
      var defaultProject, o;
      o = BaseMethods.findSubtarget.call(this, query);
      if (o) {
        return o;
      }
      defaultProject = this.getProject();
      if (defaultProject) {
        return new SubTargetMatch({
          target: defaultProject,
          keyword: '',
          property: 'project',
          query: query
        });
      }
      return false;
    }
  };

}).call(this);
