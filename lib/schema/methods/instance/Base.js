// Generated by CoffeeScript 1.11.1
(function() {
  var SubTargetMatch, uncamelize,
    hasProp = {}.hasOwnProperty;

  SubTargetMatch = require('../../../SubTargetMatch');

  uncamelize = require('uncamelize');

  module.exports = {
    getDefault: function(property) {
      var ref;
      if ((ref = this[property]) != null ? ref.length : void 0) {
        return this[property][0];
      }
    },
    getPropertyRegexParts: function(property) {
      var makeFlexibleWordDividers, parts, ref, uncamelizedPropertyRegex;
      parts = [];
      if (property[0] === '_') {
        parts.push(property);
      } else {
        makeFlexibleWordDividers = function(s) {
          return s.replace(/[-_ ]/g, '[ \\-_]*');
        };
        uncamelizedPropertyRegex = uncamelize(property);
        parts.push(makeFlexibleWordDividers(uncamelizedPropertyRegex));
      }
      if (typeof this[property] === 'object' && ((ref = this[property]) != null ? ref.getNameRegexString : void 0)) {
        parts.push(this[property].getNameRegexString());
      }
      return parts;
    },
    findSubtarget: function(query) {
      var child, childProperty, match, object, property;
      object = this.toObject({
        getters: true,
        virtuals: true,
        versionKey: false,
        minimize: false
      });
      for (property in object) {
        if (!hasProp.call(object, property)) continue;
        match = this.propertyVariantsMatchQuery(this, property, query);
        if (match) {
          return match;
        }
      }
      for (property in object) {
        if (!hasProp.call(object, property)) continue;
        child = object[property];
        if (typeof child === 'object' && (child != null) && (child.length != null)) {
          for (childProperty in child) {
            if (!hasProp.call(child, childProperty)) continue;
            match = this.propertyVariantsMatchQuery(child, childProperty, query);
            if (match) {
              return match;
            }
          }
        }
      }
    },
    propertyVariantsMatchQuery: function(parent, property, query) {
      var child, i, j, len, m, ref, ref1, regexParts;
      if (!parent.getPropertyRegexParts) {
        return;
      }
      if (typeof parent[property] === 'object' && ((ref = parent[property]) != null ? ref.length : void 0)) {
        ref1 = parent[property];
        for (i = j = 0, len = ref1.length; j < len; i = ++j) {
          child = ref1[i];
          if (!child.getNameRegexString) {
            continue;
          }
          m = query.match(new RegExp("^(" + (child.getNameRegexString()) + ")\\b\\s*", 'i'));
          if (m) {
            return new SubTargetMatch({
              target: parent[property][i],
              keyword: m[0],
              query: query.replace(m[0], ''),
              property: property + "[" + i + "]"
            });
          }
        }
      }
      regexParts = parent.getPropertyRegexParts(property);
      m = query.match(new RegExp("^(" + (regexParts.join('|')) + ")\\b\\s*", 'i'));
      if (m) {
        return new SubTargetMatch({
          target: parent[property],
          keyword: m[0],
          query: query.replace(m[0], ''),
          property: property
        });
      }
    },
    toString: function() {
      return this.getName();
    },
    getName: function() {
      return this.name;
    }
  };

}).call(this);
