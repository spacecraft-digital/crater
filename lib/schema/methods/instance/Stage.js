// Generated by CoffeeScript 1.11.1
(function() {
  var regexEscape;

  regexEscape = require('escape-string-regexp');

  module.exports = {
    getName: function(forceNoun) {
      var name;
      if (forceNoun == null) {
        forceNoun = false;
      }
      if (!this.name) {
        if (forceNoun) {
          return 'a stage';
        } else {
          return '';
        }
      }
      switch (this.name.toLowerCase()) {
        case 'qa':
          name = 'QA';
          break;
        case 'uat':
          name = 'UAT';
          break;
        default:
          name = this.name.toLowerCase();
      }
      if (forceNoun) {
        return name + " stage";
      } else {
        return name;
      }
    },
    getServer: function(role) {
      var i, len, ref, ref1, regex, s;
      regex = new RegExp("^" + role + "$", "i");
      ref = this.servers;
      for (i = 0, len = ref.length; i < len; i++) {
        s = ref[i];
        if ((ref1 = s.role) != null ? ref1.match(regex) : void 0) {
          return s;
        }
      }
    },
    getSoftware: function(name) {
      var i, len, m, ref, ref1, regex;
      regex = new RegExp("^" + name + "$", "i");
      ref = this.software;
      for (i = 0, len = ref.length; i < len; i++) {
        m = ref[i];
        if ((ref1 = m.name) != null ? ref1.match(regex) : void 0) {
          return m;
        }
      }
    },
    getNameRegexString: function() {
      var names;
      names = [regexEscape(this.name)];
      switch (this.name.toLowerCase()) {
        case 'production':
          names.push('(pre-?)?prod(uction)?');
          break;
        case 'qa':
          names.push('q[\.\-]?a\.?');
          break;
        case 'uat':
          names.push('u[\.\-]?a[\.\-]?t\.?');
      }
      return "(" + (names.join('|')) + ")(?: (?:website|site|stage))?";
    }
  };

}).call(this);
