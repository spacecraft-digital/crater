// Generated by CoffeeScript 1.11.1
(function() {
  var NaturalLanguageObjectReference, Promise, fuzzy, mongoose, regexEscape;

  mongoose = require('mongoose');

  regexEscape = require('escape-string-regexp');

  Promise = require('bluebird');

  fuzzy = require('fuzzy');

  NaturalLanguageObjectReference = require('../../../NaturalLanguageObjectReference');

  module.exports = {
    findOneByName: function(name) {
      return this.findByName(name).then(function(entities) {
        if (entities != null ? entities.length : void 0) {
          return entities[0];
        } else {
          return null;
        }
      });
    },
    findByName: function(name) {
      if (!name) {
        throw new Error("Name is required");
      }
      return this.findByExactName(name).then(function(results) {
        if (results.length) {
          return results;
        } else {
          return this.findBySingleWord(name);
        }
      }).then(function(results) {
        if (results.length) {
          return results;
        } else {
          return this.findByPartialName(name);
        }
      }).then(function(results) {
        if (results.length) {
          return results;
        } else {
          return this.findByNameParts(name);
        }
      });
    },
    findByExactName: function(name, property) {
      var o;
      if (property == null) {
        property = 'name';
      }
      o = {};
      o[property] = new RegExp("^" + (regexEscape(name || '')) + "$", 'i');
      return this.find(o).sort({
        name: 1
      });
    },
    findBySingleWord: function(name, property) {
      var o;
      if (property == null) {
        property = 'name';
      }
      o = {};
      o[property] = new RegExp("\\b" + (regexEscape(name || '')) + "\\b", 'i');
      return this.find(o).sort({
        name: 1
      });
    },
    findByPartialName: function(name, property) {
      var o;
      if (property == null) {
        property = 'name';
      }
      o = {};
      o[property] = new RegExp("" + (regexEscape(name || '')), 'i');
      return this.find(o).sort({
        name: 1
      });
    },
    findByNameParts: function(name, property) {
      var expression, i, len, o, ref1, word;
      if (property == null) {
        property = 'name';
      }
      o = {
        $and: []
      };
      ref1 = name.split(' ');
      for (i = 0, len = ref1.length; i < len; i++) {
        word = ref1[i];
        expression = {};
        expression[property] = new RegExp("\\b" + (regexEscape(word || '')) + "\\b", 'i');
        o['$and'].push(expression);
      }
      return this.find(o).sort({
        name: 1
      });
    },
    resolveNaturalLanguage: function(query) {
      var ref;
      ref = new NaturalLanguageObjectReference(this, query);
      return ref.findTarget();
    }
  };

}).call(this);
