// Generated by CoffeeScript 1.11.1
(function() {
  var NaturalLanguageObjectReference, Promise, allNameRegexString, allNames, fuzzy, mongoose, regexEscape,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  mongoose = require('mongoose');

  regexEscape = require('escape-string-regexp');

  Promise = require('bluebird');

  fuzzy = require('fuzzy');

  NaturalLanguageObjectReference = require('../../../NaturalLanguageObjectReference');

  allNames = null;

  allNameRegexString = null;

  module.exports = {
    simplifyName: function(name) {
      return name.replace(/\b(council|city|town|university|college|london borough|borough|district|of|and|[^a-z\- ]+)\b/gi, '').replace(/[ ]{2,}/g, ' ').trim();
    },
    findByName: function(name) {
      return this.findByExactName(name).then((function(_this) {
        return function(results) {
          if (results.length) {
            return results;
          } else {
            return _this.findByExactName(name, '_codename');
          }
        };
      })(this)).then((function(_this) {
        return function(results) {
          if (results.length) {
            return results;
          } else {
            return _this.findBySingleWord(name);
          }
        };
      })(this)).then((function(_this) {
        return function(results) {
          if (results.length) {
            return results;
          } else {
            return _this.findByPartialName(name);
          }
        };
      })(this)).then((function(_this) {
        return function(results) {
          if (results.length) {
            return results;
          } else {
            return _this.findByExactName(name, 'aliases');
          }
        };
      })(this)).then((function(_this) {
        return function(results) {
          if (results.length) {
            return results;
          } else {
            return _this.findBySingleWord(name, 'aliases');
          }
        };
      })(this)).then((function(_this) {
        return function(results) {
          if (results.length) {
            return results;
          } else {
            return _this.findByPartialName(name, 'aliases');
          }
        };
      })(this)).then((function(_this) {
        return function(results) {
          if (results.length) {
            return results;
          } else {
            return _this.findByNameParts(name);
          }
        };
      })(this)).then((function(_this) {
        return function(results) {
          if (results.length) {
            return results;
          } else {
            return _this.findByNameParts(name, 'aliases');
          }
        };
      })(this)).then((function(_this) {
        return function(results) {
          var simplifiedName;
          if (results.length) {
            return results;
          }
          simplifiedName = _this.simplifyName(name);
          if (simplifiedName !== name) {
            return _this.findByName(simplifiedName);
          }
        };
      })(this));
    },
    fuzzyFindOneByName: function(name) {
      name = name.replace(/['’]s?$/i, '');
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return _this.find().then(function(customers) {
            var bestMatch, i, len, result, results;
            results = fuzzy.filter(name, customers, {
              extract: function(customer) {
                return customer.name + " " + (customer.aliases.join(' '));
              }
            });
            if (!results.length) {
              return resolve(null);
            }
            bestMatch = {
              score: 0
            };
            for (i = 0, len = results.length; i < len; i++) {
              result = results[i];
              if (result.score > bestMatch.score) {
                bestMatch = result;
              }
            }
            return resolve(bestMatch.original);
          });
        };
      })(this));
    },
    getAllNames: function(forceReload) {
      var Customer;
      if (!forceReload && allNames) {
        return Promise.resolve(allNames);
      }
      if (indexOf.call(process.argv, '--debug') >= 0) {
        console.log('Loading all Customer names…');
      }
      Customer = mongoose.model('Customer');
      return Customer.find().then((function(_this) {
        return function(customers) {
          var addUniqueName, alias, customer, i, j, len, len1, names, ref1;
          names = [];
          addUniqueName = function(name) {
            name = name.toLowerCase();
            if (names.indexOf(name) === -1) {
              return names.push(name);
            }
          };
          for (i = 0, len = customers.length; i < len; i++) {
            customer = customers[i];
            addUniqueName(regexEscape(customer.name));
            ref1 = customer.aliases;
            for (j = 0, len1 = ref1.length; j < len1; j++) {
              alias = ref1[j];
              addUniqueName(alias);
            }
            addUniqueName(Customer.simplifyName(customer.name));
          }
          names.sort(function(a, b) {
            return b.length - a.length;
          });
          allNames = names;
          return Promise.resolve(names);
        };
      })(this))["catch"](console.error.bind(console));
    },
    getAllNameRegexString: function(forceReload) {
      if (!forceReload && allNameRegexString) {
        return Promise.resolve(allNameRegexString);
      }
      return this.getAllNames(forceReload).then(function(names) {
        if (indexOf.call(process.argv, '--debug') >= 0) {
          console.log("Found " + names.length + " customer names/aliases — storing regex");
        }
        allNameRegexString = "[\"'“‘]?(" + (names.join('|')) + ")[\"'”’]?";
        return Promise.resolve(allNameRegexString);
      });
    },
    resolveNaturalLanguage: function(query) {
      var ref;
      ref = new NaturalLanguageObjectReference(this, query);
      return ref.findTarget();
    }
  };

}).call(this);
